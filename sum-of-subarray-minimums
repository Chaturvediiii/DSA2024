Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Approch-1 
Creating all subarrays of the given subarray and finding the minimum for each one of them and adding them to give the required answer. O(N^2)

class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        long long ans = 0;

        for(int i=0;i<n;i++){
            ans += arr[i];
            int mini = arr[i];
            for(int j=i+1;j<n;j++){
                mini = min(arr[j],mini);
                ans+=mini;
            }
        }
        return ans;
    }
};

Apprach-2
Using a data structure which can help us find the nearest smallest element than a given element in the array which will help to count the number of subarrays which has given element as the minimmum element.
Monotonic stack can help us to solve this problem which will store elements in the increasing order.

class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        if(n==0) return 0;
        vector <long long> left(n,-1);
        vector <long long> right(n,-1);

        stack <pair<long long,long long>> st;

        for(int i=0;i<n;i++){
            int count = 1;
            while(!st.empty() && st.top().first>arr[i]){
                count+=st.top().second;
                st.pop();
            }
            st.push({arr[i],count});
            left[i] = count;
        }

        while(!st.empty()) st.pop();

        for(int i=n-1;i>=0;i--){
            int count = 1;
            while(!st.empty() && st.top().first>=arr[i]){
                count+=st.top().second;
                st.pop();
            }
            st.push({arr[i],count});
            right[i] = count;
        }
        long long ans = 0;
        long long mod = pow(10,9) + 7;
        for(int i=0;i<n;i++){
            ans += ((left[i]*right[i]*arr[i])%mod);
            ans %=mod;
        }
        return ans;
    }
};
